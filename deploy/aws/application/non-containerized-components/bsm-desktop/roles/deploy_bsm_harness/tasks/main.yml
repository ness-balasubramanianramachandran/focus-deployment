- name: Delete software directory if it exists
  win_file:
    path: "{{ software_dir }}"
    state: absent

- name: Create BSM installers software directory
  win_file:
    path: "{{ software_dir }}\\bsm_{{ app_version }}"
    state: directory

- name: Download installers' archive from Artifactory
  win_get_url:
    url: "{{ af_generic_repo_url }}/installers/{{ installers_archive_name }}"
    url_username: "{{ af_username }}"
    url_password: "{{ af_password }}"
    dest: "{{ software_dir }}\\bsm_{{ app_version }}\\{{ installers_archive_name }}"

- name: Unzip installers' archive 
  win_unzip:
    src: "{{ software_dir }}\\bsm_{{ app_version }}\\{{ installers_archive_name }}"
    dest: "{{ software_dir }}\\bsm_{{ app_version }}"
    delete_archive: yes

- name: Find Focus msi 
  win_find:
    paths: "{{ software_dir }}\\bsm_{{ app_version }}\\Installers" 
    patterns: "FIS.BalanceSheetManager Internal-*-win64.msi"
  register: focus_msi

- name: Find DataHub msi
  win_find:
    paths: "{{ software_dir }}\\bsm_{{ app_version }}\\Installers"
    patterns: Data Hub-*-win64.msi 
  register: datahub_msi

- name: Find Focus plugins
  win_find:
    paths: "{{ software_dir }}\\bsm_{{ app_version }}\\Installers"
    patterns: FIS.BalanceSheetManager Instrument Plug-In-*.zip 
  register: focus_plugins

- name: Install Focus
  win_package:
    product_id: ''
    arguments: "INSTALLFOLDER=\"{{ bsm_install_dir }}\""
    state: present
    path: "{{ focus_msi.files[0].path }}"

- name: Open Windows Firewall ports for Focus
  win_firewall_rule:
    name: FocusAppServer-TCP-In
    localport: "{{ bsm_port_range }}" 
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes

- name: Copy Focus license 
  win_copy:
    src: license_focus 
    dest: "{{ bsm_install_dir }}\\license.xml" 

- name: Copy BSM configuration template
  win_template:
    src: bsm_settings.j2 
    dest: "{{ bsm_install_dir }}\\settings.dat"

- name: Add sqlserver PowerShell module
  win_psmodule:
    name: sqlserver
    state: present

- name: Create an empty database for DataHub
  win_shell: "Invoke-Sqlcmd –ServerInstance {{ mssql_endpoint }} –Query \"CREATE DATABASE {{ dh_db_name }}\" –Username {{ mssql_username }} -Password {{ mssql_password }}"

- name: Create DataHub Logs dir
  win_file:
    path: "{{ dh_web_dir }}\\Logs"
    state: directory

- name: Create DataHub plugins dir 
  win_file:
    path: "{{ dh_web_dir }}\\Plugins"
    state: directory

- name: Copy DataHub license
  win_copy:
    src: license_dh
    dest: "{{ dh_web_dir }}\\license.xml"

- name: Copy DataHub configuration template
  win_template:
    src: dh_config.j2 
    dest: "{{ dh_web_dir }}\\dh_config.json"

- name: Copy plugins
  win_copy:
    src: "{{ focus_plugins.files[0].path }}" 
    dest: "{{ dh_web_dir }}\\Plugins\\{{ focus_plugins.files[0].filename }}"
    remote_src: yes

- name: Unzip plugins archive
  win_unzip:
    src: "{{ dh_web_dir }}\\Plugins\\{{ focus_plugins.files[0].filename }}"
    dest: "{{ dh_web_dir }}\\Plugins\\Focus Instrument Plug-In" 
    delete_archive: yes

- name: Install DataHub
  win_package:
    product_id: ''
    arguments: "INSTALL_CONFIG=\"{{ dh_web_dir }}\\dh_config.json\" INSTALL_DIR=\"{{ dh_install_dir }}\" /quiet /L {{ dh_web_dir }}\\Logs\\out.txt"
    state: present
    path: "{{ datahub_msi.files[0].path }}"

- name: Open Windows Firewall ports for DataHub
  win_firewall_rule:
    name: DataHubWebsite-TCP-In 
    localport: "{{ dh_port_number }}" 
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes
